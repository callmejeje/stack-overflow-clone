name: Java CI with Gradle

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  S3_SERVER_BUCKET_NAME: padakmon-server-bucket
  CODE_DEPLOY_APPLICATION_NAME: codedeploy-padakmon
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: codedeploy-padakmon-group
  PROPERTIES_PATH: ./server/src/main/resources/application-dev.properties
  
  
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./server
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Set application-dev.properties 
      run: |
        touch ${{ env.PROPERTIES_PATH }}
        echo "spring.datasource.url=${{ secrets.RDS_ENDPOINT }}
        spring.datasource.username=${{ secrets.RDS_ADMIN }}
        spring.datasource.password=${{ secrets.RDS_PASSWORD }}
        spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
        spring.jpa.hibernate.ddl-auto=update
        spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
        config.domain=${{ secrets.S3_ENDPOINT }}
        config.host=${{ secrets.S3_HOST }}
        jwt.secret-key=${{ secrets.JWT_SECRET_KEY }}
        jwt.access-token-expiration-minutes=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION_MINUTES }}
        jwt.refresh-token-expiration-minutes=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION_MINUTES }}
        spring.security.oauth2.client.registration.google.clientId=${{ secrets.GOOGLE_CLIENT_ID }}
        spring.security.oauth2.client.registration.google.clientSecret=${{ secrets.GOOGLE_CLIENT_SECRET_KEY }}
        spring.security.oauth2.client.registration.google.scope=${{ secrets.GOOGLE_SCOPE }}" > ${{ env.PROPERTIES_PATH }}
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.working-directory }}

    - name: Build with Gradle
      run: ./gradlew clean build -x test
      working-directory: ${{ env.working-directory }}
      
    - name: Make zip file
      run: zip -r ./$GITHUB_SHA.zip .
      shell: bash
      working-directory: ${{ env.working-directory }}
      
      # AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
        
      # 빌드 결과물 S3 Server Bucket에 업로드
    - name: Upload to AWS S3
      run: aws s3 cp --region ap-northeast-2 ./${{ env.working-directory }}/$GITHUB_SHA.zip s3://$S3_SERVER_BUCKET_NAME/$GITHUB_SHA.zip
    
      # S3 Server Bucket에 있는 파일을 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_SERVER_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
